{"ast":null,"code":"import { switchMap, tap } from 'rxjs';\nimport { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./comentarios.service\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"../../../componentes/mensagem/mensagem.component\";\n\nfunction ComentariosComponent_div_0_li_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\");\n    i0.ɵɵelementStart(1, \"p\", 10);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"em\");\n    i0.ɵɵtext(4);\n    i0.ɵɵpipe(5, \"date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"p\", 11);\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const comentario_r4 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", comentario_r4.userName, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(5, 3, comentario_r4.date, \"dd-MM-yyyy HH:mm\"));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(comentario_r4.text);\n  }\n}\n\nfunction ComentariosComponent_div_0_app_mensagem_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-mensagem\", 12);\n  }\n\n  if (rf & 2) {\n    i0.ɵɵproperty(\"mensagem\", \"Tamanho de 300 caracteres\");\n  }\n}\n\nfunction ComentariosComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelementStart(1, \"div\");\n    i0.ɵɵelementStart(2, \"ul\", 1);\n    i0.ɵɵtemplate(3, ComentariosComponent_div_0_li_3_Template, 8, 6, \"li\", 2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"div\", 3);\n    i0.ɵɵelementStart(5, \"form\", 4);\n    i0.ɵɵlistener(\"submit\", function ComentariosComponent_div_0_Template_form_submit_5_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.gravar();\n    });\n    i0.ɵɵelementStart(6, \"div\", 5);\n    i0.ɵɵelement(7, \"textarea\", 6);\n    i0.ɵɵelementStart(8, \"div\", 7);\n    i0.ɵɵelementStart(9, \"button\", 8);\n    i0.ɵɵtext(10, \" Publicar \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(11, ComentariosComponent_div_0_app_mensagem_11_Template, 1, 1, \"app-mensagem\", 9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const comentarios_r1 = ctx.ngIf;\n    const ctx_r0 = i0.ɵɵnextContext();\n    let tmp_3_0;\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngForOf\", comentarios_r1);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"formGroup\", ctx_r0.comentarioForm);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"disabled\", ctx_r0.comentarioForm.invalid);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", !!((tmp_3_0 = ctx_r0.comentarioForm.get(\"comentario\")) == null ? null : tmp_3_0.errors == null ? null : tmp_3_0.errors[\"maxLength\"]));\n  }\n}\n\nexport let ComentariosComponent = /*#__PURE__*/(() => {\n  class ComentariosComponent {\n    constructor(comentarioService, formBuilder) {\n      this.comentarioService = comentarioService;\n      this.formBuilder = formBuilder;\n    }\n\n    ngOnInit() {\n      this.comentarios$ = this.comentarioService.buscaComentario(this.animalId);\n      this.comentarioForm = this.formBuilder.group({\n        comentario: ['', Validators.maxLength(300)]\n      });\n    }\n\n    gravar() {\n      var _a, _b;\n\n      const comentario = (_b = (_a = this.comentarioForm.get('comentario')) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : '';\n      this.comentarios$ = this.comentarioService.incluiComentario(this.animalId, comentario).pipe(switchMap(() => this.comentarioService.buscaComentario(this.animalId)), tap(() => {\n        this.comentarioForm.reset();\n        alert('Salvo Comentario');\n      }));\n      /*\r\n          Primeiro eu preciso pegar o texto do comentário, comentario = this.comentarioForm.get(‘comentario’).\r\n        Como eu não sei se tem ou não valor, eu vou utilizar o safe navigation .value. E se não tiver valor, interrogação dupla, é vazio,\r\n        não tem comentário nenhum.\r\n          E vamos fazer aqui um this.comentarios, porque no momento em que ele confirmar, a página tem que ser recarregada,\r\n        então o comentário tem que pegar a nova informação que acabamos de incluir. Vamos manipular isso utilizando o RxJS.\r\n          Vamos fazer o seguinte, this.comentarios$ = this.comentariosService.incluiComentario(this.id, comentario);.\r\n        Só que ele está reclamando que eu quero um observable de comentários, não de comentário. Como nós vamos fazer essa manipulação?\r\n        Vamos utilizar o comando pipe e os operadores do RxJS.\r\n          Esse incluiComentario eu vou fazer .pipe() e vamos, como vimos nas aulas passadas, utilizar um operador chamado switchMap para convertermos o fluxo.\r\n        O fluxo está vindo de inclusão, eu quero convertê-lo para o fluxo de buscar os comentários do servidor.\r\n          Aqui vamos utilizar o operador (switchMap()). E esse operador tem que retornar, então =>, uma arrow function dentro do switchMap,\r\n        ele vai retornar o this.comentariosService.buscaComentario(this.id). Então eu converti, ele até pode reclamar, o comentário está lá.\r\n          Só que além de fazer o switchMap, nós precisamos resetar o formulário. E como fazemos isso? Para fazer o que chamamos de efeitos colaterais,\r\n        ou seja, coisas que não vão influenciar o fluxo, mas precisam acontecer durante o processamento desse fluxo, nós podemos utilizar o operador chamado tap.\r\n        Então aqui, depois do switchMap, ele vai fazer o switchMap e depois ele vai fazer o tap().\r\n          Esse tap vai fazer uma função, só que o que estiver dentro dessa função não influencia no fluxo do RxJS.\r\n        Então eu vou vir aqui no tap() e colocar => this.comentarioForm.reset();, eu vou resetar e eu vou fazer um alert falando que o comentário\r\n        foi salvo, (‘Salvo Comentário’);.\r\n        */\n    }\n\n  }\n\n  ComentariosComponent.ɵfac = function ComentariosComponent_Factory(t) {\n    return new (t || ComentariosComponent)(i0.ɵɵdirectiveInject(i1.ComentariosService), i0.ɵɵdirectiveInject(i2.FormBuilder));\n  };\n\n  ComentariosComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ComentariosComponent,\n    selectors: [[\"app-comentarios\"]],\n    inputs: {\n      animalId: \"animalId\"\n    },\n    decls: 2,\n    vars: 3,\n    consts: [[4, \"ngIf\"], [1, \"list-unstyled\", \"comentario-list\"], [4, \"ngFor\", \"ngForOf\"], [1, \"mt-4\"], [3, \"formGroup\", \"submit\"], [1, \"input-group\"], [\"formControlName\", \"comentario\", 1, \"form-control\"], [1, \"input-group-append\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", \"pull-left\", 3, \"disabled\"], [3, \"mensagem\", 4, \"ngIf\"], [1, \"text-dark\", \"font-weight-bold\", \"mr-1\"], [1, \"break-word\", \"mb-2\"], [3, \"mensagem\"]],\n    template: function ComentariosComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, ComentariosComponent_div_0_Template, 12, 4, \"div\", 0);\n        i0.ɵɵpipe(1, \"async\");\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(1, 1, ctx.comentarios$));\n      }\n    },\n    directives: [i3.NgIf, i3.NgForOf, i2.ɵNgNoValidate, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.DefaultValueAccessor, i2.NgControlStatus, i2.FormControlName, i4.MensagemComponent],\n    pipes: [i3.AsyncPipe, i3.DatePipe],\n    styles: [\".comentario-list[_ngcontent-%COMP%]{height:50vh;overflow-y:auto}\"]\n  });\n  return ComentariosComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}
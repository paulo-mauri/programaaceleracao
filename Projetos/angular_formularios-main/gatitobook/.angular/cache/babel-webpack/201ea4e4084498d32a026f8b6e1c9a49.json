{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./usuario/usuario.service\";\nimport * as i2 from \"@angular/router\";\n/*\r\n\r\n  COMANDO PARA GERAR A GUARDA ROTAS JÁ COM A OPÇÃO DE CANLOAD\r\n  ng g guard autenticacao/login --d\r\n\r\n  deve-se se marcar o CanLoad pq é uma rota lazy-load\r\n\r\n  No app-routing.module.ts devemos associar essa guarda-rotas a rota que devemos proteger, no caso se estiver logado\r\n    não acessar a pagina de login novamente e redirecionar para rota 'animais'\r\n\r\n*/\n\nexport let LoginGuard = /*#__PURE__*/(() => {\n  class LoginGuard {\n    constructor(usuarioService, router) {\n      this.usuarioService = usuarioService;\n      this.router = router;\n    }\n\n    canLoad(route, segments) {\n      if (this.usuarioService.estaLogado()) {\n        console.log('entrou aqui.');\n        this.router.navigate(['animais']);\n        return false;\n      }\n\n      return true;\n    }\n\n  }\n\n  LoginGuard.ɵfac = function LoginGuard_Factory(t) {\n    return new (t || LoginGuard)(i0.ɵɵinject(i1.UsuarioService), i0.ɵɵinject(i2.Router));\n  };\n\n  LoginGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LoginGuard,\n    factory: LoginGuard.ɵfac,\n    providedIn: 'root'\n  });\n  return LoginGuard;\n})();","map":null,"metadata":{},"sourceType":"module"}
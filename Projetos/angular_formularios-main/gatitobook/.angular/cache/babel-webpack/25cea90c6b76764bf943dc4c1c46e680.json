{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./usuario/usuario.service\";\nimport * as i2 from \"@angular/router\";\n/*\r\n\r\n  COMANDO PARA GERAR A GUARDA ROTAS JÁ COM A OPÇÃO DE CANLOAD\r\n  ng g guard autenticacao/autenticacao --d\r\n\r\n  deve-se se marcar o CanLoad pq é uma rota lazy-load\r\n\r\n  No app-routing.module.ts devemos associar essa guarda-rotas a rota que devemos proteger no caso da rota 'animais', para caso não esteja logado redirecionar ao login\r\n\r\n*/\n\nexport let AutenticacaoGuard = /*#__PURE__*/(() => {\n  class AutenticacaoGuard {\n    /**\r\n     *\r\n     */\n    constructor(usuarioService, Router) {\n      this.usuarioService = usuarioService;\n      this.Router = Router;\n    }\n\n    canLoad(route, segments) {\n      if (!this.usuarioService.estaLogado()) {\n        this.Router.navigate(['']);\n        return false;\n      }\n\n      return true;\n    }\n\n  }\n\n  AutenticacaoGuard.ɵfac = function AutenticacaoGuard_Factory(t) {\n    return new (t || AutenticacaoGuard)(i0.ɵɵinject(i1.UsuarioService), i0.ɵɵinject(i2.Router));\n  };\n\n  AutenticacaoGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AutenticacaoGuard,\n    factory: AutenticacaoGuard.ɵfac,\n    providedIn: 'root'\n  });\n  return AutenticacaoGuard;\n})();","map":null,"metadata":{},"sourceType":"module"}